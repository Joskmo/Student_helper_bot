from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Bold, BlockQuote, Text
from typing import Optional

from app.DataBase.requests import get_group_by_student, get_student_by_nickname
import app.bot.keyboards.keyboards as kb
import app.bot.filters.dateFunctions as dateFunc

router = Router()


@router.message(Command("dev_cont"))
async def dev_contact(message: Message):
    content = Text(Bold("Telegram —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: @joskmo\n"), '''–ü–∏—à–∏ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:''', BlockQuote("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ, ", message.from_user.first_name,
"\n–Ø —Å—Ç–∞—Ä–∞—é—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç –ª—É—á—à–µ"))
    await message.answer(**content.as_kwargs())
    await message.answer_sticker(r'CAACAgIAAxkBAAEG26hmkaT1hlBBAWpW5-6IUM1S0IOwMAACAhYAAiV2KEkRdkQ6i8Hv3jUE')


@router.message(F.text.lower() == "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å", StateFilter(None))
async def my_profile(message: Message, tg_nickname: Optional[str] = None):
    if tg_nickname is None: tg_nickname = message.from_user.username
    student = await get_student_by_nickname(tg_nickname)
    if student:
        parsed_bd: str
        if student.birthday is not None:
            birthday = dateFunc.parse_date(student.birthday)
            parsed_bd = f'''{birthday['day']} {birthday['month']} {birthday['year']}'''
        user_data = (
f"""<b>–§–∞–º–∏–ª–∏—è:</b> <i>{student.last_name}</i>
<b>–ò–º—è:</b> <i>{student.first_name}</i>
<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> <i>{student.surname if (student.surname != None) else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>
<b>–ú–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <i>{student.mobile_num if (student.mobile_num != None) else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>
<b>Email:</b> <i>{student.email if (student.email != None) else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <i>{parsed_bd if (student.birthday != None) else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>
<b>–°—Ç–∞—Ä–æ—Å—Ç–∞:</b> <i>{'–î–∞' if student.is_headman else '–ù–µ—Ç'}</i>"""
)
        await message.answer(f'<b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b> <blockquote>{user_data}</blockquote>',
                             reply_markup=kb.profile_kb())
    else:
        msg = await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞...', reply_markup=ReplyKeyboardRemove())
        await message.answer(f'–Ø —Ç–µ–±—è –Ω–µ –Ω–∞—Ö–æ–∂—É üôÅ\n–ñ–µ–ª–∞–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?', reply_markup=kb.create_profile())
        await msg.delete()


@router.callback_query(F.data.startswith('get_group_number'))
async def get_group_num(call: CallbackQuery):
    tg_nickname = call.from_user.username
    group = await get_group_by_student(tg_nickname)
    if group:
        group_data = (
f"""<b>–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> <i>{group.full_name}</i>
<b>–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{group.short_name}</i>
<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <i>{group.direction}</i>
<b>–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ (—Ñ–∞–∫—É–ª—å—Ç–µ—Ç):</b> <i>{group.faculty}</i>
<b>–ü–æ—á—Ç–∞ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:</b> <i>{group.group_email}</i>
<b>–°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã:
    –ò–º—è:</b> {group.first_name}
    <b>–§–∞–º–∏–ª–∏—è:</b> {group.last_name}
    <b>Telegram: </b>@{group.tg_nickname}"""
    )
        await call.answer(cache_time=5)
        await call.message.edit_text(
            text=f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ:</b> <blockquote>{group_data}</blockquote>',
            reply_markup=kb.in_group()
        )
    else:
        await call.answer(cache_time=5)
        await call.message.edit_text(
            f'–£ —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞. –•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É?',
            reply_markup=kb.wanna_group()
        )


@router.callback_query(F.data.casefold() == "profile")
async def back(call: CallbackQuery):
    await call.message.delete()
    await my_profile(call.message, call.from_user.username)


@router.callback_query(F.data.casefold() == "no_i_dont")
async def no_i_dont(call: CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.delete()
    await my_profile(message=call.message, tg_nickname=call.from_user.username)
    